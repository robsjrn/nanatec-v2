var propertymanager;propertymanager=angular.module("propertymanagerApp",["ngRoute","angularUtils.directives.dirPagination","ngDialog","templates","xeditable"]),propertymanager.factory("authInterceptor",["$window","$location",function(t,e){return{request:function(r){return r.headers=r.headers||{},t.sessionStorage.token?r.headers.token=t.sessionStorage.token:e.path("/unathorised"),r},response:function(t){return 401===t.status&&e.path("/unathorised"),t||$q.when(t)}}}]),propertymanager.config(["$routeProvider","$locationProvider","$httpProvider",function(t,e,r){r.interceptors.push("authInterceptor"),t.when("/",{templateUrl:"property_manager/views/dashboard.html",controller:"dashboardCtrl"}).when("/properties",{templateUrl:"property_manager/views/properties.html",controller:"PropertyCtrl"}).when("/edit-property/:property",{templateUrl:"Editproperty.html",controller:"EditPropertyCtrl"}).when("/units/:propertyname/:propertyid",{templateUrl:"property_manager/views/units.html",controller:"unitCtrl"}).when("/units-settings/:unitname/:unitid/:amount",{templateUrl:"unit-settings.html",controller:"unitSettingsCtrl"}).when("/tenants",{templateUrl:"property_manager/views/tenants.html",controller:"tenantsCtrl"}).when("/singletrxn",{templateUrl:"property_manager/views/singletrxn.html",controller:"singletrxnCtrl"}).when("/batchtrxn",{templateUrl:"property_manager/views/batchtrxn.html",controller:"batchtrxnCtrl"}).when("/unathorised",{templateUrl:"401.html"}).when("/not-found",{templateUrl:"404.html"}).otherwise({redirectTo:"/not-found"})}]),propertymanager.run(["$rootScope","$location","$window","$route","editableOptions",function(t,e,r,n,o){o.theme="bs3",t.$on("$locationChangeStart",function(t,n,o){var a=JSON.parse(r.sessionStorage.allowedpath);console.log("paths "+a);e.path()})}]);
propertymanager.factory("propertyManagerSrv",["$http",function(t){var n="/web/propertymanager",e={propertyExist:function(e){var r=t.get(n+"/property/check/"+e);return r},getMyProperties:function(){var e=t.get(n+"/property");return e},addProperty:function(e){var r=t.post(n+"/property",e);return r},getPropertyDetails:function(e){var r=t.get(n+"/property/"+e);return r},updateProperty:function(e){var r=t.put(n+"/property",e);return r},deleteProperty:function(e){var r=t["delete"](n+"/property/"+e);return r},ListAllUnits:function(){var e=t.get(n+"/Unit/All");return e},ListPropertyUnits:function(e){var r=t.get(n+"/Unit/"+e);return r},UnitExist:function(e){var r=t.get(n+"/Unit/check/"+e);return r},addUnit:function(e){var r=t.post(n+"/Unit",e);return r},getUnitDetails:function(e){var r=t.get(n+"/Unit"+e);return r},updateUnit:function(e){var r=t.put(n+"/Unit",e);return r},deleteUnit:function(e){var r=t["delete"](n+"/Unit"+e);return r},checkTenantContact:function(e){return t.get(n+"/Tenant/contact/"+e)},createTenant:function(e){return console.log(e),t.post(n+"/Tenant",e)},tenantLookup:function(e,r){return t.get(n+"/Tenant/lookup/?searchid="+e+"&lookup="+r)},tenantUpdate:function(e){return t.put(n+"/Tenant",e)},tenantList:function(){return t.get(n+"/Tenant")},DeleteTenant:function(e){return t["delete"](n+"/Tenant/"+e)}};return e}]);
propertymanager.controller("dashboardCtrl",["$scope","ngDialog","$window",function(o,r,n){}]);
propertymanager.controller("EditPropertyCtrl",["$scope","ngDialog","propertyManagerSrv","$location","$route",function(r,t,p,e,o){r.property=angular.fromJson(atob(o.current.params.property)),r.update=function(r){p.updateProperty(r).success(function(r){var p="<p>Property Successfully Updated </p>";t.open({template:p,plain:!0})}).error(function(r){var p="<p>Error Updating Property (kindly Inform the Administrator) </p>";t.open({template:p,plain:!0})})},r.cancel=function(){e.path("/properties")}}]);
propertymanager.controller("MainCtrl",["$scope","ngDialog","$window",function(o,e,r){o.role=r.sessionStorage.role,o.user=r.sessionStorage.names}]);
propertymanager.controller("PropertyCtrl",["$scope","ngDialog","propertyManagerSrv","$location",function(r,e,t,o){t.getMyProperties().success(function(e){r.properties=e.properties,console.log()}).error(function(r){var t="<p>Error Listing Your Properties (kindly Inform the Administrator) </p>";e.open({template:t,plain:!0})}),r.editproperty=function(r){var e=btoa(angular.toJson(r));o.path("/edit-property/"+e)},r.viewProperty=function(t){r.viewproperty=t,e.openConfirm({template:"Viewproperty.html",className:"ngdialog-theme-default",scope:r}).then(function(r){},function(r){})},r.addProperty=function(){e.openConfirm({template:"Addproperty.html",className:"ngdialog-theme-default",scope:r}).then(function(o){r.prop=o,t.addProperty(r.prop).success(function(t){r.properties.push(r.prop);var o="<p>Property  Successfully Created </p>";e.open({template:o,plain:!0})}).error(function(r){var t="<p>Error Creating Property (kindly Inform the Administrator) </p>";e.open({template:t,plain:!0})})},function(r){})},r.saveproperty=function(){}}]);
propertymanager.controller("tenantsCtrl",["$scope","ngDialog","$window","propertyManagerSrv",function(n,t,e,a){n.tenants=[],a.tenantList().success(function(t){n.tenants=t.tenants,console.log(t)}).error(function(n){var e="<p>Error Listing Your Units (kindly Inform the Administrator) </p>";t.open({template:e,plain:!0})}),n.addTenant=function(){t.openConfirm({template:"AddTenant.html",className:"ngdialog-theme-default",scope:n}).then(function(e){console.log(e),n.ten=e,a.createTenant(n.ten).success(function(e){n.tenants.push(n.ten);var a="<p>Tenant  Successfully Created </p>";t.open({template:a,plain:!0})}).error(function(n){var e="<p>Error Saving Tenant  Details (kindly Inform the Administrator) </p>";t.open({template:e,plain:!0})})},function(n){})}}]);
propertymanager.controller("unitCtrl",["$scope","ngDialog","propertyManagerSrv","$location","$route",function(t,n,r,e,o){t.propertyid=o.current.params.propertyid,t.property=o.current.params.propertyname,t.units=[],r.ListPropertyUnits(t.propertyid).success(function(n){t.units=n.units,console.log(n.units)}).error(function(t){var r="<p>Error Listing Your Units (kindly Inform the Administrator) </p>";n.open({template:r,plain:!0})}),t.addUnit=function(){n.openConfirm({template:"AddUnit.html",className:"ngdialog-theme-default",scope:t}).then(function(e){t.unt=e,t.unt.propertyid=t.propertyid,t.unt.booked=!1,console.log(t.unt),r.addUnit(t.unt).success(function(r){t.units.push(t.unt);var e="<p>Unit  Successfully Created </p>";n.open({template:e,plain:!0})}).error(function(t){var r="<p>Error Creating Property (kindly Inform the Administrator) </p>";n.open({template:r,plain:!0})})},function(t){})}}]);
propertymanager.controller("unitSettingsCtrl",["$scope","ngDialog","propertyManagerSrv","$location","$route",function(n,t,r,a,o){n.calc=angular.noop,n.unitid=o.current.params.unitid,n.unitname=o.current.params.unitname,n.amount=o.current.params.amount,n.calcRentDeposit=function(n){console.log(n)}}]);
propertymanager.directive("errSrc",function(){return{link:function(r,e,c){e.bind("error",function(){c.src!=c.errSrc&&c.$set("src",c.errSrc)}),c.$observe("ngSrc",function(r){!r&&c.errSrc&&c.$set("src",c.errSrc)})}}});
propertymanager.directive("ngFileModel",[function(){return{scope:{ngFileModel:"="},link:function(e,t,i){t.bind("change",function(t){var i=new FileReader;i.onload=function(i){e.$apply(function(){e.ngFileModel={lastModified:t.target.files[0].lastModified,lastModifiedDate:t.target.files[0].lastModifiedDate,name:t.target.files[0].name,size:t.target.files[0].size,type:t.target.files[0].type,data:i.target.result}})},i.readAsDataURL(t.target.files[0])})}}}]);
//# sourceMappingURL=data:application/json;base64,