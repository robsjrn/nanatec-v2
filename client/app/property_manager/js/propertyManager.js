var propertymanager;propertymanager=angular.module("propertymanagerApp",["ngRoute","angularUtils.directives.dirPagination","ngDialog","templates","xeditable"]),propertymanager.factory("authInterceptor",["$window","$location",function(t,r){return{request:function(e){return e.headers=e.headers||{},t.sessionStorage.token?e.headers.token=t.sessionStorage.token:r.path("/unathorised"),e},response:function(t){return 401===t.status&&r.path("/unathorised"),t||$q.when(t)}}}]),propertymanager.config(["$routeProvider","$locationProvider","$httpProvider",function(t,r,e){e.interceptors.push("authInterceptor"),t.when("/",{templateUrl:"property_manager/views/dashboard.html",controller:"dashboardCtrl"}).when("/properties",{templateUrl:"property_manager/views/properties.html",controller:"PropertyCtrl"}).when("/edit-property/:property",{templateUrl:"Editproperty.html",controller:"EditPropertyCtrl"}).when("/units",{templateUrl:"property_manager/views/units.html",controller:"unitCtrl"}).when("/singletrxn",{templateUrl:"property_manager/views/singletrxn.html",controller:"singletrxnCtrl"}).when("/batchtrxn",{templateUrl:"property_manager/views/batchtrxn.html",controller:"batchtrxnCtrl"}).when("/unathorised",{templateUrl:"401.html"}).when("/not-found",{templateUrl:"404.html"}).otherwise({redirectTo:"/not-found"})}]),propertymanager.run(["$rootScope","$location","$window","$route","editableOptions",function(t,r,e,n,o){o.theme="bs3",t.$on("$locationChangeStart",function(t,n,o){function a(t,r){for(var e=0;e<t.length;e++)if(t[e]===r)return!0;return!1}var l=JSON.parse(e.sessionStorage.allowedpath),p=r.path();a(l,p)||r.path("/unathorised")})}]);
propertymanager.factory("propertyManagerSrv",["$http",function(r){var t="/web/propertymanager",e={propertyExist:function(e){var p=r.get(t+"/property/check/"+e);return p},getMyProperties:function(){var e=r.get(t+"/property");return e},addProperty:function(e){var p=r.post(t+"/property",e);return p},getPropertyDetails:function(e){var p=r.get(t+"/property/"+e);return p},updateProperty:function(e){var p=r.put(t+"/property",e);return p},deleteProperty:function(e){var p=r["delete"](t+"/property/"+e);return p}};return e}]);
propertymanager.controller("dashboardCtrl",["$scope","ngDialog","$window",function(o,r,n){}]);
propertymanager.controller("EditPropertyCtrl",["$scope","ngDialog","propertyManagerSrv","$location","$route",function(r,t,p,e,o){r.property=angular.fromJson(atob(o.current.params.property)),r.update=function(r){p.updateProperty(r).success(function(r){var p="<p>Property Successfully Updated </p>";t.open({template:p,plain:!0})}).error(function(r){var p="<p>Error Updating Property (kindly Inform the Administrator) </p>";t.open({template:p,plain:!0})})},r.cancel=function(){e.path("/properties")}}]);
propertymanager.controller("MainCtrl",["$scope","ngDialog","$window",function(o,e,r){o.role=r.sessionStorage.role,o.user=r.sessionStorage.names}]);
propertymanager.controller("PropertyCtrl",["$scope","ngDialog","propertyManagerSrv","$location",function(r,e,t,o){t.getMyProperties().success(function(e){r.properties=e.properties,console.log()}).error(function(r){var t="<p>Error Listing Your Properties (kindly Inform the Administrator) </p>";e.open({template:t,plain:!0})}),r.editproperty=function(r){var e=btoa(angular.toJson(r));o.path("/edit-property/"+e)},r.viewProperty=function(t){r.viewproperty=t,e.openConfirm({template:"Viewproperty.html",className:"ngdialog-theme-default",scope:r}).then(function(r){},function(r){})},r.addProperty=function(){e.openConfirm({template:"Addproperty.html",className:"ngdialog-theme-default",scope:r}).then(function(o){r.prop=o,t.addProperty(r.prop).success(function(t){r.properties.push(r.prop);var o="<p>Property  Successfully Created </p>";e.open({template:o,plain:!0})}).error(function(r){var t="<p>Error Creating Property (kindly Inform the Administrator) </p>";e.open({template:t,plain:!0})})},function(r){})},r.saveproperty=function(){}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3BlcnR5X21hbmFnZXJfYXBwLmpzIiwiaHR0cFNlcnZpY2UuanMiLCJkYXNoYm9hcmRDdHJsLmpzIiwiRWRpdFByb3BlcnR5Q29udHJvbGxlci5qcyIsIm1haW5Db250cm9sbGVyLmpzIiwicHJvcGVydHlDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbInByb3BlcnR5bWFuYWdlciIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmYWN0b3J5IiwiJHdpbmRvdyIsIiRsb2NhdGlvbiIsInJlcXVlc3QiLCJjb25maWciLCJoZWFkZXJzIiwic2Vzc2lvblN0b3JhZ2UiLCJ0b2tlbiIsInBhdGgiLCJyZXNwb25zZSIsInN0YXR1cyIsIiRxIiwid2hlbiIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJydW4iLCIkcm9vdFNjb3BlIiwiJHJvdXRlIiwiZWRpdGFibGVPcHRpb25zIiwidGhlbWUiLCIkb24iLCJldmVudCIsIm5leHQiLCJjdXJyZW50IiwiZmluZEJ5SWQiLCJzb3VyY2UiLCJpZCIsImkiLCJsZW5ndGgiLCJwYXRocyIsIkpTT04iLCJwYXJzZSIsImFsbG93ZWRwYXRoIiwibmV4dFBhdGgiLCIkaHR0cCIsInVybCIsImRhdGEiLCJwcm9wZXJ0eUV4aXN0IiwicGxvdG5hbWUiLCJwcm9taXNlIiwiZ2V0IiwiZ2V0TXlQcm9wZXJ0aWVzIiwiYWRkUHJvcGVydHkiLCJkZXRhaWxzIiwicG9zdCIsImdldFByb3BlcnR5RGV0YWlscyIsInVwZGF0ZVByb3BlcnR5IiwicHV0IiwiZGVsZXRlUHJvcGVydHkiLCJwcm9wZXJ0eSIsIiRzY29wZSIsIm5nRGlhbG9nIiwicHJvcGVydHlNYW5hZ2VyU3J2IiwiZnJvbUpzb24iLCJhdG9iIiwicGFyYW1zIiwidXBkYXRlIiwicHJvcCIsInN1Y2Nlc3MiLCJ0ZW1wIiwib3BlbiIsInRlbXBsYXRlIiwicGxhaW4iLCJlcnJvciIsImNhbmNlbCIsInJvbGUiLCJ1c2VyIiwibmFtZXMiLCJwcm9wZXJ0aWVzIiwiY29uc29sZSIsImxvZyIsImVkaXRwcm9wZXJ0eSIsImRldCIsImJ0b2EiLCJ0b0pzb24iLCJ2aWV3UHJvcGVydHkiLCJ2aWV3cHJvcGVydHkiLCJvcGVuQ29uZmlybSIsImNsYXNzTmFtZSIsInNjb3BlIiwidGhlbiIsInZhbHVlIiwicmVhc29uIiwic2F2ZXByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFDQSxHQUFJQSxnQkFFSkEsaUJBQWlCQyxRQUFRQyxPQUFPLHNCQUF1QixVQUFVLHdDQUF3QyxXQUFXLFlBQVksY0FJNUhGLGdCQUFnQkcsUUFBUSxtQkFBbUIsVUFBVSxZQUFZLFNBQVdDLEVBQVFDLEdBQ2xGLE9BQ0FDLFFBQVMsU0FBVUMsR0FVakIsTUFSQUEsR0FBT0MsUUFBVUQsRUFBT0MsWUFDcEJKLEVBQVFLLGVBQWVDLE1BQzNCSCxFQUFPQyxRQUFRRSxNQUFRTixFQUFRSyxlQUFlQyxNQUlsQ0wsRUFBVU0sS0FBSyxnQkFFcEJKLEdBRVRLLFNBQVUsU0FBVUEsR0FNbEIsTUFMd0IsT0FBcEJBLEVBQVNDLFFBRWJSLEVBQVVNLEtBQUssZ0JBR1JDLEdBQVlFLEdBQUdDLEtBQUtILFFBTW5DWixnQkFBZ0JPLFFBQVEsaUJBQWtCLG9CQUFvQixnQkFBaUIsU0FBU1MsRUFBZ0JDLEVBQWtCQyxHQUUxSEEsRUFBY0MsYUFBYUMsS0FBSyxtQkFFOUJKLEVBQ0tELEtBQUssS0FDSE0sWUFBYyx3Q0FDYkMsV0FBYyxrQkFFakJQLEtBQUssZUFDSE0sWUFBYyx5Q0FDYkMsV0FBYyxpQkFFakJQLEtBQUssNEJBQ0hNLFlBQWMsb0JBQ2JDLFdBQWMscUJBRWhCUCxLQUFLLFVBQ0pNLFlBQWMsb0NBQ2JDLFdBQWMsYUFFaEJQLEtBQUssZUFDSk0sWUFBYyx5Q0FDYkMsV0FBYyxtQkFFaEJQLEtBQUssY0FDSk0sWUFBYyx3Q0FDYkMsV0FB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SUFJdEN0QixFQUFPeUIsYUFBYSxTQUFTMUIsR0FDMUJDLEVBQU8wQixhQUFhM0IsRUFDZkUsRUFBUzBCLGFBQ05oQixTQUFVLG9CQUNWaUIsVUFBVyx5QkFDWEMsTUFBTzdCLElBQ1I4QixLQUFLLFNBQVVDLEtBRVosU0FBVUMsT0FLckJoQyxFQUFPUixZQUFZLFdBRWZTLEVBQVMwQixhQUNKaEIsU0FBVSxtQkFDVmlCLFVBQVcseUJBQ1hDLE1BQU83QixJQUNSOEIsS0FBSyxTQUFVQyxHQUVkL0IsRUFBT08sS0FBS3dCLEVBQ2Y3QixFQUFtQlYsWUFBWVEsRUFBT08sTUFDbkNDLFFBQVEsU0FBVXRCLEdBQ1pjLEVBQU9rQixXQUFXMUQsS0FBS3dDLEVBQU9PLEtBQ3BDLElBQUlFLEdBQU0sd0NBQ0VSLEdBQVNTLE1BQ2JDLFNBQVVGLEVBQ1ZHLE9BQU8sTUFJbEJDLE1BQU0sU0FBVUEsR0FDYixHQUFJSixHQUFNLG1FQUNFUixHQUFTUyxNQUNiQyxTQUFVRixFQUNWRyxPQUFPLE9BS2IsU0FBVW9CLE9BS3RCaEMsRUFBT2lDLGFBQWUiLCJmaWxlIjoicHJvcGVydHlNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbnZhciBwcm9wZXJ0eW1hbmFnZXI7XHJcblxyXG5wcm9wZXJ0eW1hbmFnZXI9IGFuZ3VsYXIubW9kdWxlKCdwcm9wZXJ0eW1hbmFnZXJBcHAnLCBbJ25nUm91dGUnLCdhbmd1bGFyVXRpbHMuZGlyZWN0aXZlcy5kaXJQYWdpbmF0aW9uJywnbmdEaWFsb2cnLCd0ZW1wbGF0ZXMnLCd4ZWRpdGFibGUnXSApOyBcclxuXHJcblxyXG5cclxuICAgIHByb3BlcnR5bWFuYWdlci5mYWN0b3J5KCdhdXRoSW50ZXJjZXB0b3InLFsnJHdpbmRvdycsJyRsb2NhdGlvbicsZnVuY3Rpb24gKCAkd2luZG93LCRsb2NhdGlvbikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICByZXF1ZXN0OiBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcclxuICAgICAgICBpZiAoJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS50b2tlbikge1xyXG4gICAgICAgIGNvbmZpZy5oZWFkZXJzLnRva2VuPSAgJHdpbmRvdy5zZXNzaW9uU3RvcmFnZS50b2tlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgLy8gbm8gdG9rZW4gaW4gU3RvcmVcclxuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3VuYXRob3Jpc2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcclxuICAgICAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIHVzZXIgaXMgbm90IGF1dGhlbnRpY2F0ZWRcclxuICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3VuYXRob3Jpc2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcclxuICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuXHJcbnByb3BlcnR5bWFuYWdlci5jb25maWcoWyckcm91dGVQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlcicsJyRodHRwUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIsJGh0dHBQcm92aWRlcil7XHJcbiAgXHJcbiRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ2F1dGhJbnRlcmNlcHRvcicpO1xyXG5cclxuICAkcm91dGVQcm92aWRlclxyXG4gICAgICAud2hlbignLycsIHtcclxuICAgICAgICAgdGVtcGxhdGVVcmwgOiAncHJvcGVydHlfbWFuYWdlci92aWV3cy9kYXNoYm9hcmQuaHRtbCcsXHJcbiAgICAgICAgICBjb250cm9sbGVyICA6ICdkYXNoYm9hcmRDdHJsJ1xyXG4gICAgICAgIH0pICBcclxuICAgICAgLndoZW4oJy9wcm9wZXJ0aWVzJywge1xyXG4gICAgICAgICB0ZW1wbGF0ZVVybCA6ICdwcm9wZXJ0eV9tYW5hZ2VyL3ZpZXdzL3Byb3BlcnRpZXMuaHRtbCcsXHJcbiAgICAgICAgICBjb250cm9sbGVyICA6ICdQcm9wZXJ0eUN0cmwnXHJcbiAgICAgICAgfSlcclxuICAgICAgLndoZW4oJy9lZGl0LXByb3BlcnR5Lzpwcm9wZXJ0eScsIHtcclxuICAgICAgICAgdGVtcGxhdGVVcmwgOiAnRWRpdHByb3BlcnR5Lmh0bWwnLFxyXG4gICAgICAgICAgY29udHJvbGxlciAgOiAnRWRpdFByb3BlcnR5Q3RybCdcclxuICAgICAgICB9KVxyXG4gICAgICAgLndoZW4oJy91bml0cycsIHtcclxuICAgICAgICAgdGVtcGxhdGVVcmwgOiAncHJvcGVydHlfbWFuYWdlci92aWV3cy91bml0cy5odG1sJyxcclxuICAgICAgICAgIGNvbnRyb2xsZXIgIDogJ3VuaXRDdHJsJ1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAud2hlbignL3NpbmdsZXRyeG4nLCB7XHJcbiAgICAgICAgIHRlbXBsYXRlVXJsIDogJ3Byb3BlcnR5X21hbmFnZXIvdmlld3Mvc2luZ2xldHJ4bi5odG1sJyxcclxuICAgICAgICAgIGNvbnRyb2xsZXIgIDogJ3NpbmdsZXRyeG5DdHJsJ1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAud2hlbignL2JhdGNodHJ4bicsIHtcclxuICAgICAgICAgdGVtcGxhdGVVcmwgOiAncHJvcGVydHlfbWFuYWdlci92aWV3cy9iYXRjaHRyeG4uaHRtbCcsXHJcbiAgICAgICAgICBjb250cm9sbGVyICA6ICdiYXRjaHRyeG5DdHJsJ1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLndoZW4oJy91bmF0aG9yaXNlZCcsIHtcclxuICAgICAgICAgdGVtcGxhdGVVcmwgOiAnNDAxLmh0bWwnXHJcbiAgICAgICAgfSlcclxuICAgICAgICAud2hlbignL25vdC1mb3VuZCcsIHtcclxuICAgICAgICAgdGVtcGxhdGVVcmwgOiAnNDA0Lmh0bWwnXHJcbiAgICAgICAgfSlcclxuICAgICAgIFxyXG4gXHJcbiAgICAub3RoZXJ3aXNlKHsgcmVkaXJlY3RUbyA6ICcvbm90LWZvdW5kJyB9KTtcclxuXHJcbiAgLy8kbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcbiAgICBcclxuXHJcbn1dKTtcclxuXHJcblxyXG5wcm9wZXJ0eW1hbmFnZXIucnVuKFsnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCAnJHdpbmRvdycsJyRyb3V0ZScsJ2VkaXRhYmxlT3B0aW9ucycsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRsb2NhdGlvbiwkd2luZG93LCRyb3V0ZSxlZGl0YWJsZU9wdGlvbnMpe1xyXG4gICBlZGl0YWJsZU9wdGlvbnMudGhlbWUgPSAnYnMzJzsgXHJcblxyXG4gICRyb290U2NvcGUuJG9uKFwiJGxvY2F0aW9uQ2hhbmdlU3RhcnRcIiwgZnVuY3Rpb24oZXZlbnQsIG5leHQsIGN1cnJlbnQpe1xyXG5cclxuXHJcbiAgIHZhciBwYXRocz0gSlNPTi5wYXJzZSgkd2luZG93LnNlc3Npb25TdG9yYWdlLmFsbG93ZWRwYXRoKTtcclxuICAvLyBjb25zb2xlLmxvZyhcIm5leHQgXCIgKyBuZXh0KTtcclxuXHJcbiAgLy8gY29uc29sZS5sb2coXCJwYXRocyBcIiArIHBhdGhzKTtcclxuICAgdmFyIG5leHRQYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcclxuIC8vICBjb25zb2xlLmxvZyhcIm5leHQgcGF0aCAgXCIgKyBuZXh0UGF0aCk7XHJcbiAgICAgICAgICAgZnVuY3Rpb24gZmluZEJ5SWQoc291cmNlLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZVtpXSA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gIFxyXG4gICAgICBpZiAoZmluZEJ5SWQocGF0aHMsbmV4dFBhdGggKSl7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL3VuYXRob3Jpc2VkJyk7XHJcbiAgICAgICAgLy8gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuICAgXHJcbiAgXHJcblxyXG5cclxuXHJcbiAgIFxyXG4gIH0pO1xyXG4gIFxyXG5cclxufV0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iLCJwcm9wZXJ0eW1hbmFnZXIuZmFjdG9yeSgncHJvcGVydHlNYW5hZ2VyU3J2JywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XHJcblxyXG4gdmFyIHVybD0nL3dlYi9wcm9wZXJ0eW1hbmFnZXInO1xyXG5cdHZhciBkYXRhID0ge1xyXG4gICAgICAgICBwcm9wZXJ0eUV4aXN0OiBmdW5jdGlvbihwbG90bmFtZSkge1xyXG5cdFx0XHR2YXIgcHJvbWlzZSA9ICRodHRwLmdldCh1cmwrICcvcHJvcGVydHkvY2hlY2svJytwbG90bmFtZSlcclxuXHRcdFx0cmV0dXJuIHByb21pc2U7XHJcblx0XHQgfSxcclxuXHRcdCBnZXRNeVByb3BlcnRpZXM6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgcHJvbWlzZSA9ICRodHRwLmdldCh1cmwrICcvcHJvcGVydHknKVxyXG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcclxuXHRcdCB9LFxyXG5cclxuXHRcdCBcclxuXHJcbiAgICAgICAgIGFkZFByb3BlcnR5OiBmdW5jdGlvbihkZXRhaWxzKSB7XHJcblx0XHRcdHZhciBwcm9taXNlID0gICRodHRwLnBvc3QodXJsICsgJy9wcm9wZXJ0eScsZGV0YWlscyk7IFxyXG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcclxuXHRcdCB9LFxyXG4gICAgICAgICBnZXRQcm9wZXJ0eURldGFpbHM6IGZ1bmN0aW9uKGRldGFpbHMpIHtcclxuXHRcdFx0dmFyIHByb21pc2UgPSAgJGh0dHAuZ2V0KHVybCArICcvcHJvcGVydHkvJytkZXRhaWxzKTsgXHJcblx0XHRcdHJldHVybiBwcm9taXNlO1xyXG5cdFx0IH0sXHJcbiAgICAgICAgIHVwZGF0ZVByb3BlcnR5OiBmdW5jdGlvbihkZXRhaWxzKSB7XHJcblx0XHRcdHZhciBwcm9taXNlID0gICRodHRwLnB1dCh1cmwgKyAnL3Byb3BlcnR5JyxkZXRhaWxzKTsgXHJcblx0XHRcdHJldHVybiBwcm9taXNlO1xyXG5cdFx0IH0sXHJcbiAgICAgICAgIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbihwcm9wZXJ0eSkge1xyXG5cdFx0XHR2YXIgcHJvbWlzZSA9ICAkaHR0cC5kZWxldGUodXJsICsgJy9wcm9wZXJ0eS8nK3Byb3BlcnR5KTsgXHJcblx0XHRcdHJldHVybiBwcm9taXNlO1xyXG5cdFx0IH0sXHJcblxyXG4gICAgICAgICAgICAgIH1cclxuXHRyZXR1cm4gZGF0YTtcclxufV0pO1xyXG4iLCJcclxuXHJcbnByb3BlcnR5bWFuYWdlci5jb250cm9sbGVyKCdkYXNoYm9hcmRDdHJsJywgWyckc2NvcGUnLCduZ0RpYWxvZycsJyR3aW5kb3cnLCBmdW5jdGlvbigkc2NvcGUsbmdEaWFsb2csJHdpbmRvdyl7XHJcblxyXG5cclxuICAgIFxyXG5cdH1dKTtcclxuIiwicHJvcGVydHltYW5hZ2VyLmNvbnRyb2xsZXIoJ0VkaXRQcm9wZXJ0eUN0cmwnLCBbJyRzY29wZScsJ25nRGlhbG9nJywncHJvcGVydHlNYW5hZ2VyU3J2JywnJGxvY2F0aW9uJywnJHJvdXRlJywgZnVuY3Rpb24oJHNjb3BlLG5nRGlhbG9nLHByb3BlcnR5TWFuYWdlclNydiwkbG9jYXRpb24sJHJvdXRlKXtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0eT1hbmd1bGFyLmZyb21Kc29uKGF0b2IoJHJvdXRlLmN1cnJlbnQucGFyYW1zLnByb3BlcnR5KSk7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlPWZ1bmN0aW9uKHByb3Ape1xyXG5cclxuICAgICAgICAgICAgXHRwcm9wZXJ0eU1hbmFnZXJTcnYudXBkYXRlUHJvcGVydHkocHJvcClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHRcdCAgICAgICAgICAgICAgIHZhciB0ZW1wID0nPHA+UHJvcGVydHkgU3VjY2Vzc2Z1bGx5IFVwZGF0ZWQgPC9wPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdEaWFsb2cub3Blbih7XHJcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wLFxyXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcclxuXHRcdFx0XHQgICAgICAgICAgICB9KVxyXG5cdFx0XHRcdCAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSc8cD5FcnJvciBVcGRhdGluZyBQcm9wZXJ0eSAoa2luZGx5IEluZm9ybSB0aGUgQWRtaW5pc3RyYXRvcikgPC9wPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdEaWFsb2cub3Blbih7XHJcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wLFxyXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbD1mdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgXHQkbG9jYXRpb24ucGF0aCgnL3Byb3BlcnRpZXMnKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgXHJcblx0fV0pOyIsIlxyXG5wcm9wZXJ0eW1hbmFnZXIuY29udHJvbGxlcignTWFpbkN0cmwnLCBbJyRzY29wZScsJ25nRGlhbG9nJywnJHdpbmRvdycsIGZ1bmN0aW9uKCRzY29wZSxuZ0RpYWxvZywkd2luZG93KXtcclxuXHJcblxyXG5cdCAkc2NvcGUucm9sZT0kd2luZG93LnNlc3Npb25TdG9yYWdlLnJvbGU7XHJcblx0ICRzY29wZS51c2VyPSR3aW5kb3cuc2Vzc2lvblN0b3JhZ2UubmFtZXM7XHJcblxyXG5cclxuXHJcbiAgICBcclxuXHR9XSk7XHJcbiIsIlxyXG5wcm9wZXJ0eW1hbmFnZXIuY29udHJvbGxlcignUHJvcGVydHlDdHJsJywgWyckc2NvcGUnLCduZ0RpYWxvZycsJ3Byb3BlcnR5TWFuYWdlclNydicsJyRsb2NhdGlvbicsIGZ1bmN0aW9uKCRzY29wZSxuZ0RpYWxvZyxwcm9wZXJ0eU1hbmFnZXJTcnYsJGxvY2F0aW9uKXtcclxuXHJcbiAgXHJcblxyXG4gICAgICAgICAgcHJvcGVydHlNYW5hZ2VyU3J2LmdldE15UHJvcGVydGllcygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAkc2NvcGUucHJvcGVydGllcz1kYXRhLnByb3BlcnRpZXM7XHJcblx0XHRcdFx0ICAgICAgICAgICAgICAgY29uc29sZS5sb2coKTtcclxuXHRcdFx0XHQgICAgICAgICAgICB9KVxyXG5cdFx0XHRcdCAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSc8cD5FcnJvciBMaXN0aW5nIFlvdXIgUHJvcGVydGllcyAoa2luZGx5IEluZm9ybSB0aGUgQWRtaW5pc3RyYXRvcikgPC9wPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdEaWFsb2cub3Blbih7XHJcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wLFxyXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcclxuXHRcdFx0XHQgICB9KTsgICBcclxuICAgICAgICAgICAkc2NvcGUuZWRpdHByb3BlcnR5PWZ1bmN0aW9uKHByb3BlcnR5KXtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgdmFyIGRldD1idG9hKGFuZ3VsYXIudG9Kc29uKHByb3BlcnR5KSk7XHJcblxyXG4gICAgICAgICBcdCAgICAkbG9jYXRpb24ucGF0aCgnL2VkaXQtcHJvcGVydHkvJytkZXQpO1xyXG4gICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgJHNjb3BlLnZpZXdQcm9wZXJ0eT1mdW5jdGlvbihwcm9wZXJ0eSl7XHJcbiAgICAgICAgIFx0ICAkc2NvcGUudmlld3Byb3BlcnR5PXByb3BlcnR5O1xyXG4gICAgICAgICAgICAgICAgIG5nRGlhbG9nLm9wZW5Db25maXJtKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJ1ZpZXdwcm9wZXJ0eS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICduZ2RpYWxvZy10aGVtZS1kZWZhdWx0JyxcclxuICAgICAgICAgICAgICAgICAgICBzY29wZTogJHNjb3BlXHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICRzY29wZS5hZGRQcm9wZXJ0eT1mdW5jdGlvbigpe1xyXG5cclxuICAgICAgICAgICAgICAgbmdEaWFsb2cub3BlbkNvbmZpcm0oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnQWRkcHJvcGVydHkuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmdkaWFsb2ctdGhlbWUtZGVmYXVsdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZVxyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb3A9dmFsdWU7XHJcbiAgICAgICAgICAgICAgICBcdHByb3BlcnR5TWFuYWdlclNydi5hZGRQcm9wZXJ0eSgkc2NvcGUucHJvcCkgXHJcbiAgICAgICAgICAgICAgICBcdCAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIFx0ICBcdCAgICAgICRzY29wZS5wcm9wZXJ0aWVzLnB1c2goJHNjb3BlLnByb3ApO1xyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICB2YXIgdGVtcCA9JzxwPlByb3BlcnR5ICBTdWNjZXNzZnVsbHkgQ3JlYXRlZCA8L3A+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ0RpYWxvZy5vcGVuKHtcclxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXAsXHJcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWluOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IFxyXG5cdFx0XHRcdCAgICAgICAgICAgICAgICBcclxuXHRcdFx0XHQgICAgICAgICAgICB9KVxyXG5cdFx0XHRcdCAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyb3IpIHtcclxuXHRcdFx0XHQgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSc8cD5FcnJvciBDcmVhdGluZyBQcm9wZXJ0eSAoa2luZGx5IEluZm9ybSB0aGUgQWRtaW5pc3RyYXRvcikgPC9wPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdEaWFsb2cub3Blbih7XHJcblx0XHQgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wLFxyXG5cdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFpbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcclxuXHRcdFx0XHQgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICBcdFxyXG4gICAgICAgICAgICAgICAgXHRcdCAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAkc2NvcGUuc2F2ZXByb3BlcnR5ID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cclxuICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgIFxyXG5cdH1dKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9